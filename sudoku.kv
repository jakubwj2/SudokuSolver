#: import FallOutTransition kivy.uix.screenmanager.FallOutTransition
#: import RiseInTransition kivy.uix.screenmanager.RiseInTransition

#:set primary_color rgba("#1a5653")
#:set secondary_color rgba("#08313a")
#:set bg_primary_color rgba("#5cd85a")
#:set bg_secondary_color rgba("#107869")
#:set bg_tetriary_color rgba("#74ff72")
#:set spacing_padding dp(20)
#:set font_s sp(25)
#:set border_size dp(3)
#:set transition_len .25

<CameraScreen>
    name: "camera"
    BoxLayout:
        orientation: "horizontal" if root.width > root.height else "vertical"
        RelativeLayout:
            size_hint: None, None
            size: (self.parent.height // 9 * 16, self.parent.height) if root.width > root.height else (self.parent.width // 9 * 16, self.parent.width)
            Camera:
                id: camera
                resolution: 1920, 1080
                play: root.transition_state == "in"

            Button:
                text: "Back"

                on_press:
                    root.manager.transition = FallOutTransition(duration = transition_len)
                    root.manager.current="sudoku"
                size_hint: None, None
                size: 100,50
                pos_hint: {"x": 0.01, 'top': 0.99}

        OperationButton:
            text: "Capture Sudoku"
            on_press: root.capture_sudoku()


<SudokuScreen>
    name: "sudoku"
    BoxLayout:
        padding: spacing_padding
        spacing: spacing_padding
        orientation: "horizontal" if root.width > root.height else "vertical"
        canvas:
            Color:
                rgba: bg_primary_color
            Rectangle:
                size: root.size
                pos: root.pos
        AnchorLayout:
            anchor_x: "center"
            anchor_y: "center"
            SudokuWidget:
                cols: 3
                spacing: border_size
                size_hint: None, None
                size: min(self.parent.height, self.parent.width), min(self.parent.height, self.parent.width)
                canvas.before:
                    Color:
                        rgba: secondary_color
                    Rectangle:
                        pos: self.x - border_size, self.y - border_size
                        size: self.width + border_size * 2, self.height + border_size * 2

        BoxLayout:
            orientation: "vertical"
            spacing: spacing_padding / 2
            AnchorLayout:
                anchor_x: "center"
                DialWidget:
                    cols: 3
                    spacing: spacing_padding / 2
                    size_hint: None, None
                    size: min(self.parent.height, self.parent.width), min(self.parent.height, self.parent.width)

            GridLayout:
                rows: 2
                size_hint: 1, 0.4
                spacing: spacing_padding / 2
                OperationButton:
                    text: "Clear"
                    on_press: app.on_clear(self)
                OperationButton:
                    text: "Lock"
                    on_press: app.on_lock(self)
                OperationButton:
                    text: "Validate"
                    on_press: app.on_validate(self)
                OperationButton:
                    text: "Filter"
                    on_press: app.on_filter(self)
                OperationButton:
                    text: "Candidates"
                    on_press: app.on_show_candidates(self)
                OperationButton:
                    text: "Solve"
                    on_press: app.on_solve(self)
                OperationButton:
                    text: "Camera"
                    on_press:  
                        root.manager.transition = RiseInTransition(duration = transition_len)
                        root.manager.current = "camera"


<SudokuCell>
    anchor_x: "center"
    anchor_x: "center"
    canvas:
        Color:
            rgba: (0,0,0,0) if root.state == "normal" else (0, 0, 0.5, 0.5)
        Rectangle:
            pos:self.pos
            size:self.size
    canvas.before:
        Color:
            rgba: bg_secondary_color if root.is_highlighted else bg_tetriary_color
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        text: str(root.number if root.number != 0 else "")
        color: (0,0,0,1) if root.is_locked else secondary_color
        font_size: font_s

    Label:
        text: root.candidate_list
        font_size:sp(11)
        color: "black"


<DialButton>
    text: str(self.number)
    background_normal: ""
    background_color: bg_tetriary_color
    color: secondary_color
    font_size: font_s * 1.5
    group:"dial_buttons"


<OperationButton@Button>
    size_hint: 1, 1
    background_normal: ""
    background_color: secondary_color
    color: bg_primary_color
    font_size: font_s


<-ConfirmPopup>:
	GridLayout:
		cols: 1
		padding: '12dp'
		pos_hint: {'center': (0.5, 0.5)}
		size_hint_x: 0.66
		size_hint_y: None
		height: self.minimum_height

		canvas:
			Color:
				rgba: root.background_color[:3] + [root.background_color[-1] * root._anim_alpha]
			Rectangle:
				size: root._window.size if root._window else (0, 0)

			Color:
				rgb: 1, 1, 1
			BorderImage:
				source: root.background
				border: root.border
				pos: self.pos
				size: self.size

		Label:
			text: root.text
			size_hint_y: None
			height: self.texture_size[1] + dp(16)
			text_size: self.width - dp(16), None
			halign: 'center'

		BoxLayout:
			size_hint_y: None
			height: sp(48)

			Button:
				text: root.ok_text
				on_press: root.ok()
			Button:
				text: root.cancel_text
				on_press: root.cancel()
